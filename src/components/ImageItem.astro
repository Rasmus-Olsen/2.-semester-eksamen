---
const { imgUrl, rawHTMLString } = Astro.props;
---

<div class="item item-a">
    <div id="content-container">
        <p set:html={rawHTMLString}></p>
    </div>
</div>

<style define:vars={{imgUrl}}>
    * {
        margin: 0;
        box-sizing: border-box;
    }

    .item {
        height: 100vh; /* Set height to 100vh */
        width: 100vw;
        display: flex;
        align-items: center;
        justify-content: center;
        background-image: var(--imgUrl);
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
        background-position: right;
        background-attachment: fixed;

        margin-top: -80px;
        overflow: hidden; /* Hide overflow */
    }

    #content-container {
        width: 100vw;
        padding: 20px 300px;
        color: #000;
        text-align: center;
        overflow-x: hidden;
        overflow-y: auto;
        max-height: 70vh;
    }

    @media (max-width: 800px) {
        #content-container {
            padding: 20px;
        }
    }

    #content-container::-webkit-scrollbar {
        width: 0; /* Hide scrollbar */
    }

    /* Fade in effect for all items except the first */
    .item:not(:first-of-type) {
        opacity: 0.4;
        transition: opacity 2s;
    }

    .item.fade-in {
        opacity: 1 !important;
    }

    p {
        font-size: 24px;
        margin: 0; /* Reset margin to avoid extra space */
    }
</style>

<script>
    // Select all divs with class .item
    const items = document.querySelectorAll(".item");

    // Add scroll event listener
    window.addEventListener("scroll", handleScroll);

    // Flag to prevent automatic scrolling
    let allowScroll = true;

    // Function to handle scroll event
    function handleScroll() {
        if (allowScroll) {
            console.log("Manual scroll detected");
            scrollToContent();
            allowScroll = false;
            setTimeout(() => {
                allowScroll = true;
            }, 1000); // Set a timeout to allow scrolling again after 1 second
        }
    }

    // Function to scroll to content container
    function scrollToContent() {
        // Trigger point for scrolling to the content container
        const triggerBottom = window.innerHeight / 2;

        items.forEach((item) => {
            const itemTop = item.getBoundingClientRect().top;

            // Check if the item is within the trigger area and is the second item
            if (itemTop < triggerBottom && item !== items[0]) {
                const contentContainer = item.querySelector("#content-container");
                contentContainer.scrollIntoView({ behavior: "smooth" });
            }
        });
    }
</script>
